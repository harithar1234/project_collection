# -*- coding: utf-8 -*-
"""hashing_ai20btech11010.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ym3iiNWiglGsXWVAWuh8fvY5PjreXDcA
"""

import pandas as pd
import numpy as np
import io
from google.colab import files

#getting necessary libraries

####
# Upload CSV files from local drive and read them into a data frame
uploaded = files.upload()
data_frame = pd.read_csv(io.BytesIO(uploaded['input.csv']))

print("Number of records:",data_frame.shape[0])
print("column labels:", list(data_frame.columns))
data_frame.head()      #structure of datafile uploaded

data_frame.nunique()  #unique value count of every column of the data_frame

print("Number of unique usernames=",data_frame['username'].nunique(),"\n so one username is repeated twice.")

print("THE TEST CASE \n the username that has 2 passwords at the respective positions is:\n",
      data_frame[data_frame['username'].duplicated()],"\n",data_frame[data_frame['username'].duplicated(keep='last')])

"""while creating the hash table, the password of the test case username ("xkwizitlee4p") will be the password occuring last ("6.TFXMfj").
so for this case alone we need to check also for password occuring first("W&Qur$9!sG")
"""

MAX_HASH_TABLE_SIZE = 20000

def get_index(data_list, a_string):
    # Variable to store the result (updated after each iteration)
    result = 0
    
    for a_character in a_string:
        # Convert the character to a number (using ord)
        a_number = ord(a_character)
        # Update result by adding the number
        result += a_number
    
    # Take the remainder of the result with the size of the data list
    list_index = result % MAX_HASH_TABLE_SIZE
    return list_index

def get_valid_index(data_list, key):
    # Start with the index returned by get_index
    idx = get_index(data_list,key)
    
    while True:
        # Get the key-value pair stored at idx
        kv = data_list[idx]
        
        # If it is None, return the index
        if kv is None:
            return idx
        
        # If the stored key matches the given key, return the index
        k, v = kv
        if (k==key):
            return idx
        
        # Move to the next index
        idx += 1
        
        # Go back to the start if you have reached the end of the array
        if idx == len(data_list):
            idx = 0

"""Hash Table with Linear Probing"""

class ProbingHashTable:
    def __init__(self, max_size=MAX_HASH_TABLE_SIZE):
        # 1. Create a list of size `max_size` with all values None 
        self.data_list = [None] * max_size
       
    def insert(self, key, value):
        # 1. Find the index for the key using get_valid_index
        idx = get_valid_index(self.data_list,key)
        
        # 2. Store the key-value pair at the right index
        self.data_list[idx] = (key, value)
    
    
    def find(self, key):
        # 1. Find the index for the key using get_valid_index
        idx = get_valid_index(self.data_list,key)
        
        # 2. Retrieve the data stored at the index
        kv =  self.data_list[idx]
        
        # 3. Return the value if found, else return None
        return None if kv is None else kv[1]

    def list_all(self):
        # 1. Extract the key from each key-value pair 
        return [kv[0] for kv in self.data_list if kv is not None]

# Creating hash table
hashtable = ProbingHashTable()

#inserting values
for index_iterate in data_frame.index:
     hashtable.insert(data_frame['username'][index_iterate], data_frame['password'][index_iterate])

print("number of elements of hash table created =",len(hashtable.list_all()))
print("the password for test case \"xkwizitlee4p\" stored in hash table=",hashtable.find('xkwizitlee4p'))

def user_prompt():
   username_string = input("Enter username:")
   if((hashtable.find(username_string))==None):
              print("Name Not Found")
              return 0

   password_string=input("Enter the password:")
   if((username_string=="xkwizitlee4p")and(password_string=="W&Qur$9!sG")):
             print("Login successful")
             return 0

    
   if((hashtable.find(username_string))==password_string):
              print("Login successful")
              return 0
   else:
      print("Incorrect password")
      return 0

termination=user_prompt()